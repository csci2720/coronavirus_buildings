{"ast":null,"code":"var _jsxFileName = \"/Users/d.dildakhan/Desktop/coronavirus_buildings/project-react/src/components/Table.js\";\nimport React from \"react\";\nimport { useTable, useFilters, useGlobalFilter } from \"react-table\";\nconst data = [{\n  firstName: \"jane\",\n  lastName: \"doe\",\n  age: 20\n}, {\n  firstName: \"john\",\n  lastName: \"smith\",\n  age: 21\n}];\nconst columns = [{\n  Header: \"Name\",\n  columns: [{\n    Header: \"First Name\",\n    accessor: \"firstName\",\n    filter: \"text\"\n  }, {\n    Header: \"Last Name\",\n    accessor: \"lastName\",\n    filter: \"text\"\n  }]\n}, {\n  Header: \"Other Info\",\n  columns: [{\n    Header: \"Age\",\n    accessor: \"age\",\n    filter: \"text\"\n  }]\n}];\n\nconst DefaultColumnFilter = ({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) => {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/React.createElement(\"input\", {\n    value: filterValue || \"\",\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    placeholder: `Search ${count} records...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  });\n};\n\nconst GlobalFilter = ({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) => {\n  const count = preGlobalFilteredRows && preGlobalFilteredRows.length;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Search:\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n    value: globalFilter || \"\",\n    onChange: e => {\n      setGlobalFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `${count} records...`,\n    style: {\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst TableData = () => {\n  const filterTypes = React.useMemo(() => ({\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    filterTypes\n  }, useFilters, useGlobalFilter);\n  return /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }), column.render(\"Header\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 33\n    }\n  }, column.canFilter ? column.render(\"Filter\") : null))))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 40\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  })));\n};\n\nexport default TableData;","map":{"version":3,"sources":["/Users/d.dildakhan/Desktop/coronavirus_buildings/project-react/src/components/Table.js"],"names":["React","useTable","useFilters","useGlobalFilter","data","firstName","lastName","age","columns","Header","accessor","filter","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","border","TableData","filterTypes","useMemo","text","rows","id","row","rowValue","values","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useTable, useFilters, useGlobalFilter } from \"react-table\";\n\nconst data = [\n    { firstName: \"jane\", lastName: \"doe\", age: 20 },\n    { firstName: \"john\", lastName: \"smith\", age: 21 }\n];\n\nconst columns = [\n    {\n        Header: \"Name\",\n        columns: [\n            {\n                Header: \"First Name\",\n                accessor: \"firstName\",\n                filter: \"text\"\n            },\n            {\n                Header: \"Last Name\",\n                accessor: \"lastName\",\n                filter: \"text\"\n            }\n        ]\n    },\n    {\n        Header: \"Other Info\",\n        columns: [\n            {\n                Header: \"Age\",\n                accessor: \"age\",\n                filter: \"text\"\n            }\n        ]\n    }\n];\n\nconst DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter }\n}) => {\n    const count = preFilteredRows.length;\n\n    return (\n        <input\n            value={filterValue || \"\"}\n            onChange={e => {\n                setFilter(e.target.value || undefined);\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    );\n};\n\nconst GlobalFilter = ({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter\n}) => {\n    const count = preGlobalFilteredRows && preGlobalFilteredRows.length;\n\n    return (\n        <span>\n            Search:{\" \"}\n            <input\n                value={globalFilter || \"\"}\n                onChange={e => {\n                    setGlobalFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n                }}\n                placeholder={`${count} records...`}\n                style={{\n                    border: \"0\"\n                }}\n            />\n        </span>\n    );\n};\n\nconst TableData = () => {\n    const filterTypes = React.useMemo(\n        () => ({\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id];\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true;\n                });\n            }\n        }),\n        []\n    );\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            Filter: DefaultColumnFilter\n        }),\n        []\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        visibleColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            filterTypes\n        },\n        useFilters,\n        useGlobalFilter\n    );\n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render(\"Header\")}\n                                <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                <tr>\n                    <th\n                        colSpan={visibleColumns.length}\n                        style={{\n                            textAlign: \"left\"\n                        }}\n                    >\n                        <GlobalFilter\n                            preGlobalFilteredRows={preGlobalFilteredRows}\n                            globalFilter={state.globalFilter}\n                            setGlobalFilter={setGlobalFilter}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n\nexport default TableData;"]},"metadata":{},"sourceType":"module"}